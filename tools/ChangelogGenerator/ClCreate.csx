#nullable enable
#load "Settings.csx"
#load "Models.csx"

using System.Globalization;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Threading;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã.
var githubRepository = Environment.GetEnvironmentVariable("GITHUB_REPOSITORY")
                       ?? throw new InvalidOperationException("üö´ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GITHUB_REPOSITORY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞
var client = new HttpClient();
client.DefaultRequestHeaders.UserAgent.ParseAdd("PostmanRuntime/7.28.0");
client.DefaultRequestHeaders.Accept.ParseAdd("application/vnd.github.groot-preview+json");
var page = 0;
var lastClosedPrDate = DateTime.Parse(File.ReadAllLines(Settings.LastClosedPrDateFile)[0], CultureInfo.InvariantCulture);
var newLastClosedPrDate = lastClosedPrDate;

// –ü–∞—Ä—Å–∏–Ω–≥ PR.
while (true)
{
    page++;
    var response = await client.GetAsync($"https://api.github.com/search/issues?q=repo:{githubRepository} is:pr is:merged&order=desc&per_page=100&sort=created&page={page}");
    var searchResponse = await response.Content.ReadFromJsonAsync<Github.Search<Github.PullRequest>>(Settings.JsonOptions)
                         ?? throw new InvalidOperationException("üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Github.");

    if (searchResponse.Items.Count == 0)
    {
        WriteLine("‚úÖ –ë–æ–ª—å—à–µ PR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
        File.WriteAllText(Settings.LastClosedPrDateFile, newLastClosedPrDate.ToString(CultureInfo.InvariantCulture));

        return 0;
    }

    foreach (var pullRequest in searchResponse.Items)
    {
        if (pullRequest.Closed is null)
        {
            continue;
        }

        if (pullRequest.Closed > newLastClosedPrDate)
        {
            newLastClosedPrDate = (DateTime)pullRequest.Closed;
        }

        if (pullRequest.Closed <= lastClosedPrDate)
        {
            WriteLine("‚úÖ –ë–æ–ª—å—à–µ PR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.");
            File.WriteAllText(Settings.LastClosedPrDateFile, newLastClosedPrDate.ToString(CultureInfo.InvariantCulture));

            return 0;
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ —á–µ–Ω–π–¥–∂–ª–æ–≥–∞.
        try
        {
            Changelog changelog = pullRequest.ParseChangelog();
            var changelogPath = Path.GetFullPath($"PR-{pullRequest.Number}.json", Settings.ChangelogsFolder);
            File.WriteAllText(changelogPath, JsonSerializer.Serialize(changelog, Settings.JsonOptions));
            WriteLine($"‚úÖ –ß–µ–π–Ω–¥–∂–ª–æ–≥ PR #{pullRequest.Number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
        }
        catch (Exception e)
        {
            WriteLine($"üö´ –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ PR #{pullRequest.Number}:\n\t{e.Message}");
        }
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤.
    Thread.Sleep(TimeSpan.FromSeconds(7));
}
