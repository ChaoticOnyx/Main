#!/usr/bin/env dotnet-script
#nullable enable
#load "Settings.csx"
#load "Models.csx"

#r "nuget:Scriban, 3.6.0"
using System.IO;
using System.Linq;
using System.Text.Json;
using Scriban;
using Console = System.Console;

// –ü–æ–∏—Å–∫ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —á–µ–π–Ω–¥–∂–ª–æ–≥–æ–≤.
var files = (from file in Directory.GetFiles(Settings.ChangelogsFolder)
             where Path.GetFileName(file)[0] != '.' && Path.GetExtension(file) == ".json"
             select file).ToList();

var changelogs = files.Select(f => JsonSerializer.Deserialize<Changelog>(File.ReadAllText(f), Settings.JsonOptions)
                                   ?? throw new InvalidOperationException($"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∞—Ä—Å–∏—Ç—å {f}"))
                      .ToList();

changelogs = Changelog.Merge(changelogs);

if (changelogs.Count == 0)
{
    WriteLine("–ù–µ—Ç –Ω–æ–≤—ã—Ö —á–µ–π–Ω–¥–∂–ª–æ–≥–æ–≤.");
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∫—ç—à–∞.
var cache = JsonSerializer.Deserialize<List<Changelog>>(File.ReadAllText(Settings.ChangelogsCache), Settings.JsonOptions)
                           ?? throw new InvalidOperationException($"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∞—Ä—Å–∏—Ç—å {Settings.ChangelogsCache}");

cache.AddRange(changelogs);
cache = Changelog.Merge(cache);
cache = cache.OrderByDescending(c => c.Date).ToList();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞.
bool anyErrors = false;
foreach (var changelog in cache)
{
    if (string.IsNullOrEmpty(changelog.Author))
    {
        anyErrors = true;
        WriteLine($"üö´ –ò–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º:\n{changelog}");
    }

    if (changelog.Changes.Count == 0)
    {
        anyErrors = true;
        WriteLine($"üö´ –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º:\n{changelog}");
    }

    foreach (var change in changelog.Changes)
    {
        if (string.IsNullOrEmpty(change.Message))
        {
            anyErrors = true;
            WriteLine($"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º:\n{changelog}");
        }
    }
}

if (anyErrors)
{
    return 1;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —à–∞–±–ª–æ–Ω–∞
Template template = Template.Parse(File.ReadAllText(Settings.ChangelogTemplate));
var context = new
{
    GeneratingTime = DateTime.Now,
    Changelogs = cache
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
WriteLine("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML.");
File.WriteAllText(Settings.HtmlChangelog, template.Render(context));

WriteLine("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞.");
File.WriteAllText(Settings.ChangelogsCache, JsonSerializer.Serialize(cache, Settings.JsonOptions));

WriteLine("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–π–Ω–¥–∂–ª–æ–≥ —Ñ–∞–π–ª–æ–≤.");
files.ForEach(f => File.Delete(f));

return 0;
