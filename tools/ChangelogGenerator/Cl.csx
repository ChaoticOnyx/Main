#nullable enable
#load "Settings.csx"
#load "Models.csx"

using System.Net.Http;
using System.Net.Http.Json;
using System.Text.Json;
using System.Text.RegularExpressions;
using Console = System.Console;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã.
var githubRepository = Environment.GetEnvironmentVariable("GITHUB_REPOSITORY") ?? throw new InvalidOperationException("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GITHUB_REPOSITORY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
var githubSha = Environment.GetEnvironmentVariable("GITHUB_SHA") ?? throw new InvalidOperationException("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GITHUB_SHA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.
var client = new HttpClient();
client.DefaultRequestHeaders.UserAgent.ParseAdd("PostmanRuntime/7.28.0");
client.DefaultRequestHeaders.Accept.ParseAdd("application/vnd.github.groot-preview+json");

var response = await client.GetAsync($"https://api.github.com/repos/{githubRepository}/commits/{githubSha}/pulls");
response.EnsureSuccessStatusCode();
var pullRequests = await response.Content.ReadFromJsonAsync<List<Github.PullRequest>>(Settings.JsonOptions) ?? throw new InvalidOperationException("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Github.");

// –ü—Ä–æ–≤–µ—Ä–∫–∞ PR.
if (pullRequests.Count == 0)
{
    throw new InvalidOperationException($"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ PR –¥–ª—è –∫–æ–º–º–∏—Ç–∞ {githubSha} –∏–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –∫–æ–º–º–∏—Ç.");
}

var pullRequest = pullRequests.First();

if (string.IsNullOrEmpty(pullRequest.Body))
{
    throw new InvalidOperationException("–£ PR –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ.");
}

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ PR.
var clBody = new Regex(@"(:cl:|üÜë)(.+)?\r\n((.|\n|\r)+?)\r\n\/(:cl:|üÜë)", RegexOptions.Multiline);
var clSplit = new Regex(@"(^\w+):\s+(\w.+)", RegexOptions.Multiline);

var changesBody = clBody.Match(pullRequest.Body).Value;
var matches = clSplit.Matches(changesBody);

if (string.IsNullOrEmpty(changesBody) || matches.Count == 0)
{
    throw new InvalidOperationException("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ PR –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
}

Changelog changelog = new()
{
    Author = pullRequest.User.Login,
    Date = DateTime.Now
};

foreach (Match match in matches)
{
    string[] parts = match.Value.Split(':');

    if (parts.Length != 2)
    {
        throw new InvalidOperationException($"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è: '{match.Value}'");
    }

    var prefix = parts[0].Trim();
    var message = parts[1].Trim();
    var anyErrors = false;

    if (!Settings.ValidPrefixes.Contains(prefix))
    {
        anyErrors = true;
        WriteLine($"–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {prefix}");
    }

    if (anyErrors)
    {
        return 1;
    }

    changelog.Changes.Add(new() {
        Prefix = prefix,
        Message = message
    });
}



// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–π–Ω–¥–∂–ª–æ–≥–∞.
var fileName = $"{Settings.ChangelogsFolder}{pullRequest.Number}.json";
WriteLine($"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–π–Ω–¥–∂–ª–æ–≥–∞ –≤ {fileName}");
File.WriteAllText(fileName, JsonSerializer.Serialize(changelog, Settings.JsonOptions));

return 0;
