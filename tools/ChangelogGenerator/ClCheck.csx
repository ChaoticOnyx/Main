#nullable enable
#load "Settings.csx"
#load "Models.csx"

using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Http.Json;
using System.Text.Json;
using Console = System.Console;

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã.
var githubRepository = Environment.GetEnvironmentVariable("GITHUB_REPOSITORY")
                       ?? throw new InvalidOperationException("üö´ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GITHUB_REPOSITORY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
var token = Environment.GetEnvironmentVariable("TOKEN")
                ?? throw new InvalidOperationException("üö´ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
var githubEventPath = Environment.GetEnvironmentVariable("GITHUB_EVENT_PATH")
                      ?? throw new InvalidOperationException("üö´ –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GITHUB_EVENT_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞
var client = new HttpClient();
client.DefaultRequestHeaders.UserAgent.ParseAdd("PostmanRuntime/7.28.0");
client.DefaultRequestHeaders.Accept.ParseAdd("application/vnd.github.groot-preview+json");
client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PR
var eventPayaload = JsonSerializer.Deserialize<Github.Event>(File.ReadAllText(githubEventPath), Settings.JsonOptions)
                    ?? throw new InvalidOperationException($"üö´ –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å {githubEventPath}");

var pullRequest = eventPayaload.PullRequest;

if (pullRequest is null)
{
    WriteLine("üö´ PR –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω.");

    return 1;
}

try
{
    var changelog = pullRequest.ParseChangelog();
}
catch (Exception e)
{
    WriteLine($"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —á–µ–π–Ω–¥–∂–ª–æ–≥–∞:\n\t{e.Message}");
    var response = await client.PutAsync($"https://api.github.com/repos/{githubRepository}/issues/{pullRequest.Number}/labels", new StringContent($"{{ \"labels\": [\"{Settings.ChangelogRequiredLabel}\"] }}"));
    response.EnsureSuccessStatusCode();

    return 1;
}

WriteLine($"‚úÖ –ß–µ–π–Ω–¥–∂–ª–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.");
var response = await client.DeleteAsync($"https://api.github.com/repos/{githubRepository}/issues/{pullRequest.Number}/labels/{Uri.EscapeUriString(Settings.ChangelogRequiredLabel)}");

return 0;
